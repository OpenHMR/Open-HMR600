#ifndef __INC_HAL819XUSBREG_H
#define __INC_HAL819XUSBREG_H


//============================================================================
//       819xUsb Regsiter offset definition
//============================================================================

//2 define it temp!!!
#define RFPC					0x5F			// Rx FIFO Packet Count
#define RCR_9356SEL			BIT6
#define TCR_LRL_OFFSET		0
#define TCR_SRL_OFFSET		8
#define TCR_MXDMA_OFFSET	21
#define TCR_SAT				BIT24		// Enable Rate depedent ack timeout timer
#define RCR_MXDMA_OFFSET	8
#define RCR_FIFO_OFFSET		13
#define RCR_OnlyErlPkt		BIT31				// Rx Early mode is performed for packet size greater than 1536
#define CWR					0xDC			// Contention window register
#define RetryCTR				0xDE			// Retry Count register



#define PCIF						0x009					// PCI Function Register 0x0009h~0x000bh
#define BB_GLOBAL_RESET		0x020					// BasebandGlobal Reset Register
#define BSSIDR					0x02E					// BSSID Register
#define CMDR					0x037					// Command register
#define TCR						0x040					// Transmit Configuration Register
#define RCR						0x044					// Receive Configuration Register
#define SLOT_TIME				0x049					// Slot Time Register
#define ACK_TIMEOUT				0x04c					// Ack Timeout Register
#define PIFS_TIME				0x04d					// PIFS time
#define USTIME					0x04e					// Microsecond Tuning Register, Sets the microsecond time unit used by MAC clock.
#define 	EDCAPARA_BE			0x050					// EDCA Parameter of AC BE
#define 	EDCAPARA_BK			0x054					// EDCA Parameter of AC BK
#define 	EDCAPARA_VO			0x058					// EDCA Parameter of AC VO
#define	EDCAPARA_VI			0x05C					// EDCA Parameter of AC VI
#define	CWRR					0x060					// Contention Window Report Register
#define	BCN_TCFG				0x062					// Beacon Time Configuration
#define	BCN_INTERVAL			0x070					// Beacon Interval (TU)
#define	ATIMWND				0x072					// ATIM Window Size (TU)
#define	BCN_DRV_EARLY_INT		0x074					// Driver Early Interrupt Time (TU). Time to send interrupt to notify driver to change beacon content before TBTT
#define	BCN_DMATIME			0x076					// Beacon DMA and ATIM interrupt time (US). Indicates the time before TBTT to perform beacon queue DMA
//#define	ATIM_INTR_TIME			0x076					// Beacon DMA and ATIM interrupt time (US). Indicates the time before TBTT to perform beacon queue DMA
#define	BCN_ERR_THRESH		0x078						// Beacon Error Threshold
#define   RWCAM					0x0A0					//IN 8190 Data Sheet is called CAMcmd
#define	WCAMI					0x0A4					// Software write CAM input content
#define	RCAMO					0x0A8					// Software read/write CAM config
#define   SECR					0x0B0					//Security Configuration Register
//#define 	IMR						0x0f4					// Interrupt Mask Register
//#define 	ISR						0x0f8					// Interrupt Status Register
#define 	IMR						0x354					// Interrupt Mask Register
#define 	ISR						0x350					// Interrupt Status Register
#define	IMR_POLL				0x360					

#define 	TPPoll					0x0fd					// Transmit priority polling register
#define 	PSR						0x0ff					// Page Select Register
#define 	CPU_GEN				0x100					// CPU Reset Register
#define	AcmAvg					0x170					// ACM Average Period Register
#define 	AcmHwCtrl				0x171					// ACM Hardware Control Register
#define 	AcmFwCtrl				0x172					// ACM Firmware Control Register
#define 	VOAdmTime				0x174					// VO Queue Admitted Time Register
#define 	VIAdmTime				0x178					// VI Queue Admitted Time Register
#define	BEAdmTime				0x17C					// BE Queue Admitted Time Register
#define RQPN1					0x180					// Reserved Queue Page Number , Vo Vi, Be, Bk
#define RQPN2					0x184					// Reserved Queue Page Number, HCCA, Cmd, Mgnt, High
#define RQPN3					0x188					// Reserved Queue Page Number, Bcn, Public, 
#define 	QPRR 					0x1E0					// Queue Page Report per TID
#define 	QPNR					0x1d0					// Queue Packet Number report per TID
#define 	BQDA					0x200					// Beacon Queue Descriptor Address
#define	HQDA					0x204					// High Priority Queue Descriptor Address
#define 	CQDA					0x208					// Command Queue Descriptor Address
#define 	MQDA					0x20C					// Management Queue Descriptor Address
#define 	HCCAQDA 				0x210					// HCCA Queue Descriptor Address
#define 	VOQDA					0x214					// VO Queue Descriptor Address
#define	VIQDA					0x218					// VI Queue Descriptor Address
#define 	BEQDA					0x21C					// BE Queue Descriptor Address
#define	BKQDA					0x220					// BK Queue Descriptor Address
#define 	RCQDA					0x224					// Receive command Queue Descriptor Address
#define 	RDQDA					0x228					// Receive Queue Descriptor Start Address 

#define MAR0						0x240					// Multicast filter. 
#define MAR4						0x244

#define	CCX_PERIOD				0x250	// CCX Measurement Period Register, in unit of TU. 
#define	CLM_RESULT				0x251	// CCA Busy fraction register.
#define	NHM_PERIOD			0x252	// NHM Measurement Period register, in unit of TU.

#define	NHM_THRESHOLD0		0x253	// Noise Histogram Meashorement0.
#define	NHM_THRESHOLD1		0x254	// Noise Histogram Meashorement1.
#define	NHM_THRESHOLD2		0x255	// Noise Histogram Meashorement2.
#define	NHM_THRESHOLD3		0x256	// Noise Histogram Meashorement3.
#define	NHM_THRESHOLD4		0x257	// Noise Histogram Meashorement4.
#define	NHM_THRESHOLD5		0x258	// Noise Histogram Meashorement5.
#define	NHM_THRESHOLD6		0x259	// Noise Histogram Meashorement6

#define	MCTRL 					0x25A	// Measurement Control

#define	NHM_RPI_COUNTER0		0x264	// Noise Histogram RPI counter0, the fraction of signal strength < NHM_THRESHOLD0. 
#define	NHM_RPI_COUNTER1		0x265	// Noise Histogram RPI counter1, the fraction of signal strength in (NHM_THRESHOLD0, NHM_THRESHOLD1]. 
#define	NHM_RPI_COUNTER2		0x266	// Noise Histogram RPI counter2, the fraction of signal strength in (NHM_THRESHOLD1, NHM_THRESHOLD2].
#define	NHM_RPI_COUNTER3		0x267	// Noise Histogram RPI counter3, the fraction of signal strength in (NHM_THRESHOLD2, NHM_THRESHOLD3].
#define	NHM_RPI_COUNTER4		0x268	// Noise Histogram RPI counter4, the fraction of signal strength in (NHM_THRESHOLD3, NHM_THRESHOLD4].
#define	NHM_RPI_COUNTER5		0x269	// Noise Histogram RPI counter5, the fraction of signal strength in (NHM_THRESHOLD4, NHM_THRESHOLD5].
#define	NHM_RPI_COUNTER6		0x26A	// Noise Histogram RPI counter6, the fraction of signal strength in (NHM_THRESHOLD5, NHM_THRESHOLD6]. 
#define	NHM_RPI_COUNTER7		0x26B	// Noise Histogram RPI counter7, the fraction of signal strength in (NHM_THRESHOLD6, NHM_THRESHOLD7].

#define	BW_OPMODE				0x300	// Bandwidth operation mode
#define	MSR						0x303	// Media Status register
#define 	RETRY_LIMIT				0x304	// Retry Limit [15:8]-short, [7:0]-long
#define	TSFR					0x308	
#define 	RRSR					0x310	// Response Rate Set
#define	UFWP					0x318	// Update Firmware Polling Register
#define	RATR0					0x320	// Rate Adaptive Table register1

#define	MCS_TXAGC				0x340	// MCS AGC
#define	CCK_TXAGC				0x348	// CCK AGC

#define	MacBlkCtrl				0x403	// Mac block on/off control register

#define	Cmd9346CR				0xFE58	// 9346CR cmd register

#if (RTL819X_FPGA_VER & RTL819X_FPGA_VIVI_070920)

//----------------------------------------------------------------------------
//       8192U Cmd9346CR bits					(Offset 0x058-0059, 16bit)
//----------------------------------------------------------------------------
#define 	Cmd9346CR_9356SEL					BIT4
#define	AFR						0x010	// AutoLoad Function Register

//----------------------------------------------------------------------------
//       8190 AFR bits					(Offset 0x010-0011, 16bit)
//----------------------------------------------------------------------------
#define 	AFR_CardBEn						BIT0
#define	AFR_CLKRUN_SEL					BIT1
#define	AFR_FuncRegEn						BIT2

//----------------------------------------------------------------------------
//       8190 EEROM
//----------------------------------------------------------------------------

#define RTL8190_EEPROM_ID				0x8129
#define EEPROM_NODE_ADDRESS_BYTE_0	0x0C

#define EEPROM_TxPowerDiff				0x1F
#define EEPROM_ThermalMeter			0x20
#define EEPROM_PwDiff					0x21	//0x21
#define EEPROM_CrystalCap				0x22	//0x22
#define EEPROM_TxPwIndex_CCK			0x23	//0x23
#define EEPROM_TxPwIndex_OFDM_24G	0x24	//0x24~0x26
#define EEPROM_TxPwIndex_OFDM_5G		0x27	//0x27~0x3E
#define EEPROM_Default_TxPowerDiff		0x0
#define EEPROM_Default_ThermalMeter	0x7
#define EEPROM_Default_PwDiff			0x4
#define EEPROM_Default_CrystalCap		0x5
#define EEPROM_Default_TxPower			0x1010

#define EEPROM_ChannelPlan				0x7c	//0x7C
#define EEPROM_IC_VER					0x7d	//0x7D
#define EEPROM_CRC						0x7e	//0x7E~0x7F

#endif

//----------------------------------------------------------------------------
//       8190 BcnTCfg bits					(Offset 0x062-0063, 16bit)
//----------------------------------------------------------------------------

#define BCN_TCFG_CW_SHIFT		8
#define BCN_TCFG_IFS			0	


//----------------------------------------------------------------------------
//       8190 DrvErlyInt bits					(Offset 0x074-0075, 16bit)
//----------------------------------------------------------------------------

#define	BCN_DRV_EARLY_INT_SWBCN_SHIFT	8
#define	BCN_DRV_EARLY_INT_TIME_SHIFT	0


//----------------------------------------------------------------------------
//       8190 DrvErlyInt bits					(Offset 0x074-0075, 16bit)
//----------------------------------------------------------------------------

#define	MSR_NOLINK				0x00
#define	MSR_ADHOC				0x01
#define	MSR_INFRA				0x02
#define	MSR_AP					0x03


//----------------------------------------------------------------------------
//       8190 BW_OPMODE bits					(Offset 0x300, 8bit)
//----------------------------------------------------------------------------

#define	BW_OPMODE_11J			BIT0
#define	BW_OPMODE_5G			BIT1
#define	BW_OPMODE_20MHZ		BIT2


// TODO: Remove unused register
//Undefined register set in 8190. Use unused register to do temporary definition before hardware spec is final
#define	UnusedRegister			0x6c					// Use All purpose Timer2

//Misc
#define	IDR0					0x000					// MAC ID of the device
#define	IDR4					0x004					// MAC ID of the device
#define 	BRSR					UnusedRegister			// Basic rate set
#define 	CR9346					UnusedRegister
#define 	CONFIG3				UnusedRegister
#define 	Config4					UnusedRegister
#define 	MISC_REG				UnusedRegister			// Miscellaneouse registers (0x1fe ~ 0x1ff)

//Security Related
#define	DCAM					UnusedRegister			// Debug CAM Interface

//PHY Configuration related
#define 	RF_Ready				UnusedRegister			//RF Ready register
#define 	BBAddr					UnusedRegister			// Phy register address register
#define 	PhyDataW				UnusedRegister			// Phy register data write
#define 	PhyDataR				UnusedRegister			// Phy register data read
#define 	RFPinsOutput			UnusedRegister
#define 	RFPinsEnable			UnusedRegister
#define 	RFPinsSelect				UnusedRegister
#define 	RFPinsInput				UnusedRegister
#define 	RFPara					UnusedRegister
#define 	RFTiming				UnusedRegister
#define 	ANTSEL					UnusedRegister
#define 	PhyMuxPar				UnusedRegister
#define 	AnaParm				UnusedRegister
#define 	AnaParm2				UnusedRegister

//GPIO
#define	GPE						0x10A
#define	GPO						0x109
#define	GPI						0x108




//----------------------------------------------------------------------------
//       8190 BB_GLOBAL_RESET	 bits			(Offset 0x020-0027, 8bit)
//----------------------------------------------------------------------------
#define	BB_GLOBAL_RESET_BIT	0x1

//----------------------------------------------------------------------------
//       8190 PCIF bits							(Offset 0x009-000b, 24bit)
//----------------------------------------------------------------------------

#define 	MXDMA2_16bytes		0x000
#define 	MXDMA2_32bytes		0x001
#define 	MXDMA2_64bytes		0x010
#define 	MXDMA2_128bytes		0x011
#define	MXDMA2_256bytes		0x100
#define 	MXDMA2_512bytes		0x101
#define 	MXDMA2_1024bytes		0x110

#define	MXDMA2_RX_SHIFT		4
#define	MXDMA2_TX_SHIFT		0



//----------------------------------------------------------------------------
//       8190 (CMD) command register bits		(Offset 0x37, 8 bit)
//----------------------------------------------------------------------------
#define 	CR_RST					0x10
#define 	CR_RE					0x08
#define 	CR_TE					0x04
#define 	CR_MulRW				0x01

//----------------------------------------------------------------------------
//       8190 (RCR) Receive Configuration Register	(Offset 0x44~47, 32 bit)
//----------------------------------------------------------------------------
#define 	RCR_ONLYERLPKT	BIT31			// Early Receiving based on Packet Size.
#define 	RCR_ENCS2			BIT30				// Enable Carrier Sense Detection Method 2
#define 	RCR_ENCS1			BIT29				// Enable Carrier Sense Detection Method 1
#define 	RCR_ENMBID			BIT27				// Enable Multiple BssId.
#define 	RCR_ACKTXBW		(BIT24|BIT25)		// TXBW Setting of ACK frames
#define 	RCR_CBSSID			BIT23				// Accept BSSID match packet
#define 	RCR_APWRMGT		BIT22				// Accept power management packet
#define	RCR_ADD3			BIT21			// Accept address 3 match packet
#define 	RCR_AMF			BIT20				// Accept management type frame
#define 	RCR_ACF			BIT19				// Accept control type frame
#define 	RCR_ADF			BIT18				// Accept data type frame
#define 	RCR_RXFTH			BIT13	// Rx FIFO Threshold
#define 	RCR_AICV			BIT12				// Accept ICV error packet
#define	RCR_ACRC32			BIT5			// Accept CRC32 error packet 
#define	RCR_AB				BIT3			// Accept broadcast packet 
#define	RCR_AM				BIT2			// Accept multicast packet 
#define	RCR_APM			BIT1			// Accept physical match packet
#define	RCR_AAP			BIT0			// Accept all unicast packet 






//----------------------------------------------------------------------------
//       8185 Config4 Regsiter 					(offset 0x5a, 1 byte)
//----------------------------------------------------------------------------
#define 	Config4_VCOPowerDown	0x0
#define 	Config4_PowerOff		0x0			// Turn ON/Off RF Power(RFMD)
#define 	Config4_PwrMgtMode		0x0			// Adapter in Power Save mode
#define 	Config4_LWPME			0x0			// LanWake vs PME
#define 	Config4_LWPTN			0x0			// LanWake pattern
#define 	Config4_RFtype			0x0			// RF type


//----------------------------------------------------------------------------
//       8190 CAM Command Register     		(offset 0xA0, 4 byte)
//----------------------------------------------------------------------------
#define   CAM_CM_SecCAMPolling		BIT31		//Security CAM Polling		
#define   CAM_CM_SecCAMClr			BIT30		//Clear all bits in CAM
#define   CAM_CM_SecCAMWE			BIT16		//Security CAM enable


//----------------------------------------------------------------------------
//       8190 Debug CAM Register	 			(offset 0xAC, 4 byte)
//----------------------------------------------------------------------------
#define   Dbg_CAM_TXSecCAMInfo		BIT31		//Retrieve lastest Tx Info
#define	Dbg_CAM_SecKeyFound		BIT30		//Security KEY Found


//----------------------------------------------------------------------------
//       8190 Security Configuration Register	(offset 0xB0, 1 byte)
//----------------------------------------------------------------------------
#define	SCR_TxUseDK			BIT0			//Force Tx Use Default Key
#define   SCR_RxUseDK			BIT1			//Force Rx Use Default Key
#define   SCR_TxEncEnable		BIT2			//Enable Tx Encryption
#define   SCR_RxDecEnable		BIT3			//Enable Rx Decryption
#define   SCR_SKByA2				BIT4			//Search kEY BY A2
#define   SCR_NoSKMC			BIT5			//No Key Search for Multicast



//----------------------------------------------------------------------------
//       8190 IMR/ISR bits						(offset 0xfd,  8bits)
//----------------------------------------------------------------------------

#define 	IMR_ATIMEND			BIT28			// ATIM Window End Interrupt			
#define 	IMR_TBDOK				BIT27			// Transmit Beacon OK Interrupt
#define 	IMR_TBDER				BIT26			// Transmit Beacon Error Interrupt
#define 	IMR_TXFOVW			BIT15			// Transmit FIFO Overflow
#define 	IMR_TIMEOUT0			BIT14			// TimeOut0
#define 	IMR_BcnInt				BIT13			// Beacon DMA Interrupt 0
#define	IMR_RXFOVW			BIT12			// Receive FIFO Overflow
#define 	IMR_RDU				BIT11			// Receive Descriptor Unavailable
#define 	IMR_RXCMDOK			BIT10			// Receive Command Packet OK
#define  	IMR_BDOK				BIT9			// Beacon Queue DMA OK Interrup
#define  	IMR_HIGHDOK			BIT8			// High Queue DMA OK Interrupt
#define	IMR_COMDOK			BIT7			// Command Queue DMA OK Interrupt
#define  	IMR_MGNTDOK			BIT6			// Management Queue DMA OK Interrupt
#define  	IMR_HCCADOK			BIT5			// HCCA Queue DMA OK Interrupt
#define	IMR_BKDOK				BIT4			// AC_BK DMA OK Interrupt
#define	IMR_BEDOK				BIT3			// AC_BE DMA OK Interrupt
#define	IMR_VIDOK				BIT2			// AC_VI DMA OK Interrupt
#define	IMR_VODOK				BIT1			// AC_VO DMA Interrupt
#define	IMR_ROK				BIT0			// Receive DMA OK Interrupt

//----------------------------------------------------------------------------
//       8190 AcmHwCtrl bits 					(offset 0x171, 1 byte)
//----------------------------------------------------------------------------
#define	AcmHw_HwEn			BIT0
#define	AcmHw_BeqEn			BIT1
#define	AcmHw_ViqEn			BIT2
#define	AcmHw_VoqEn			BIT3
#define	AcmHw_BeqStatus		BIT4
#define	AcmHw_ViqStatus		BIT5
#define	AcmHw_VoqStatus		BIT6

//----------------------------------------------------------------------------
//       8190 AcmFwCtrl bits 					(offset 0x172, 1 byte)
//----------------------------------------------------------------------------
#define	AcmFw_BeqStatus			BIT0
#define	AcmFw_ViqStatus			BIT1
#define	AcmFw_VoqStatus			BIT2

//----------------------------------------------------------------------------
//       8190 PSR bits 						(offset 0xff, 1 byte)
//----------------------------------------------------------------------------
#define PSR_GEN					0x0				// Page 0 register general MAC Control
#define PSR_CPU					0x1				// Page 1 register for CPU


//----------------------------------------------------------------------------
//       8190Pci CAM Config Setting (offset 0xA0, 1 byte)
//----------------------------------------------------------------------------
#define 	CAM_VALID			       BIT15
#define 	CAM_NOTVALID			0x0000
#define 	CAM_USEDK				BIT5


#define 	CAM_NONE				0x0
#define 	CAM_WEP40				0x01
#define 	CAM_TKIP				0x02
#define 	CAM_AES				0x04
#define 	CAM_WEP104			0x05


#define 	TOTAL_CAM_ENTRY				32

#define 	CAM_CONFIG_USEDK		TRUE
#define 	CAM_CONFIG_NO_USEDK	FALSE

#define 	CAM_WRITE				BIT16
#define 	CAM_READ				0x00000000
#define 	CAM_POLLINIG			BIT31

#define 	SCR_UseDK				0x01
#define 	SCR_TxSecEnable		0x02
#define 	SCR_RxSecEnable		0x04


//----------------------------------------------------------------------------
//       8190Pci QoS Config Setting (offset , 1 byte)
//----------------------------------------------------------------------------

#define 	AC_PARAM_TXOP_LIMIT_OFFSET		16
#define 	AC_PARAM_ECW_MAX_OFFSET		12
#define 	AC_PARAM_ECW_MIN_OFFSET			8
#define 	AC_PARAM_AIFS_OFFSET				0

//----------------------------------------------------------------------------
//       8187B MCTRL Setting (offset 0x25A, 1 byte)
//----------------------------------------------------------------------------
#define	MCTRL_CLS					BIT0		// Start Channel Load Measurement
#define	MCTRL_NHS					BIT1		// Start Noise Histogram Measurement
#define	MCTRL_SRC					BIT2		// Source select for Noise Histogram
#define	MCTRL_BLOCK_ENABLE		BIT3		// Enable block noise measurement
#define	MCTRL_DIS_OFDM_CCA_ED	BIT4		// Set this bit to disable ofdm_cca_ed


//=============================================================================
//       8190 CPU Regsiter offset definition
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
//       8190 CPU General Register		(offset 0x100, 4 byte)
//----------------------------------------------------------------------------

#define 	CPU_CCK_LOOPBACK			0x00030000
#define 	CPU_GEN_SYSTEM_RESET		0x00000001
#define 	CPU_GEN_FIRMWARE_RESET	0x00000008
#define 	CPU_GEN_BOOT_RDY			0x00000010
#define 	CPU_GEN_FIRM_RDY			0x00000020
#define 	CPU_GEN_PUT_CODE_OK		0x00000080
#define 	CPU_GEN_BB_RST			0x00000100
#define 	CPU_GEN_PWR_STB_CPU		0x00000004
#define 	CPU_GEN_NO_LOOPBACK_MSK	0xFFF8FFFF		// Set bit18,17,16 to 0. Set bit19
#define 	CPU_GEN_NO_LOOPBACK_SET	0x00080000		// Set BIT19 to 1



//----------------------------------------------------------------------------
//       8190 Retry Limit					(Offset 0x304-0305, 16bit)
//----------------------------------------------------------------------------
#define	RETRY_LIMIT_SHORT_SHIFT	8
#define 	RETRY_LIMIT_LONG_SHIFT	0


//----------------------------------------------------------------------------
//       8190 Rate Adaptive Table Register	(offset 0x320, 4 byte)
//----------------------------------------------------------------------------

//CCK
#define	RATR_1M					0x00000001
#define	RATR_2M					0x00000002
#define	RATR_55M					0x00000004
#define	RATR_11M					0x00000008
//OFDM
#define	RATR_6M					0x00000010
#define	RATR_9M					0x00000020
#define	RATR_12M					0x00000040
#define	RATR_18M					0x00000080
#define	RATR_24M					0x00000100
#define	RATR_36M					0x00000200
#define	RATR_48M					0x00000400
#define	RATR_54M					0x00000800
//MCS 1 Spatial Stream	
#define	RATR_MCS0					0x00001000
#define	RATR_MCS1					0x00002000
#define	RATR_MCS2					0x00004000
#define	RATR_MCS3					0x00008000
#define	RATR_MCS4					0x00010000
#define	RATR_MCS5					0x00020000
#define	RATR_MCS6					0x00040000
#define	RATR_MCS7					0x00080000
//MCS 2 Spatial Stream
#define	RATR_MCS8					0x00100000
#define	RATR_MCS9					0x00200000
#define	RATR_MCS10					0x00400000
#define	RATR_MCS11					0x00800000
#define	RATR_MCS12					0x01000000
#define	RATR_MCS13					0x02000000
#define	RATR_MCS14					0x04000000
#define	RATR_MCS15					0x08000000
// ALL CCK Rate
#define RATE_ALL_CCK				RATR_1M|RATR_2M|RATR_55M|RATR_11M 
#define RATE_ALL_OFDM_AG			RATR_6M|RATR_9M|RATR_12M|RATR_18M|RATR_24M\
									|RATR_36M|RATR_48M|RATR_54M	
#define RATE_ALL_OFDM_1SS			RATR_MCS0|RATR_MCS1|RATR_MCS2|RATR_MCS3 | \
									RATR_MCS4|RATR_MCS5|RATR_MCS6	|RATR_MCS7	
#define RATE_ALL_OFDM_2SS			RATR_MCS8|RATR_MCS9	|RATR_MCS10|RATR_MCS11| \
									RATR_MCS12|RATR_MCS13|RATR_MCS14|RATR_MCS15

//----------------------------------------------------------------------------
//       8190 Response Rate Set Register	(offset 0x310, 4 byte)
//----------------------------------------------------------------------------

#define RRSR_RSC_OFFSET			21
#define RRSR_SHORT_OFFSET			23
#define RRSR_RSC_DUPLICATE			0x600000
#define RRSR_RSC_LOWSUBCHNL		0x400000
#define RRSR_RSC_UPSUBCHANL		0x200000
#define RRSR_SHORT					0x800000
#define RRSR_1M						BIT0
#define RRSR_2M						BIT1 
#define RRSR_5_5M					BIT2 
#define RRSR_11M					BIT3 
#define RRSR_6M						BIT4 
#define RRSR_9M						BIT5 
#define RRSR_12M					BIT6 
#define RRSR_18M					BIT7 
#define RRSR_24M					BIT8 
#define RRSR_36M					BIT9 
#define RRSR_48M					BIT10 
#define RRSR_54M					BIT11
#define RRSR_MCS0					BIT12
#define RRSR_MCS1					BIT13
#define RRSR_MCS2					BIT14
#define RRSR_MCS3					BIT15
#define RRSR_MCS4					BIT16
#define RRSR_MCS5					BIT17
#define RRSR_MCS6					BIT18
#define RRSR_MCS7					BIT19


//============================================================================
//       End of 819xUsb Regsiter offset definition
//============================================================================


#endif // #ifndef __INC_HAL819XUSBREG_H

